name: Build VM images

on:
  workflow_dispatch:
    inputs:
      source-ref:
        description: 'Ref to commit in source repo'
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Create shared directory
        run: |
          set -e

          mkdir -p ~/shared
          touch ~/shared/.keep
      - name: Collect shared artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shared-storage
          path: /home/runner/shared
  build:
    needs:
      - prepare
    # Using macOS as it is the only platform that supports nested virtualization
    # in GitHub Actions
    runs-on: macos-12
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          repository: YangHanlin/tdinfra
          ref: ${{ inputs.source-ref }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      - name: Download shared artifacts
        uses: actions/download-artifact@v3
        with:
          name: shared-storage
          path: /Users/runner/shared
      - name: Set up general cache
        uses: actions/cache@v3
        with:
          path: /Users/runner/.cache
          key: general-${{ runner.os }}-${{ hashFiles('**/*.pkr*.hcl') }}
          restore-keys: |
            general-${{ runner.os }}-
            general-
      - name: Set up dependencies
        run: |
          set -e

          # Install dependencies
          brew install \
            qemu \
            cdrtools \
            coreutils \
            gomplate \
            helm

          # Install mkpasswd using RubyGems
          gem install mkpasswd

          # Install cloud-localds manually
          wget -O /usr/local/bin/cloud-localds https://raw.githubusercontent.com/canonical/cloud-utils/main/bin/cloud-localds
          chmod +x /usr/local/bin/cloud-localds

          # Tweaks to make cloud-localds work in macOS environment
          ln -s "$(which mkisofs)" /usr/local/bin/genisoimage
      - name: Set up Docker Desktop
        uses: docker-practice/actions-setup-docker@master
      - name: Set up cache for Docker images
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Build VM images
        run: |
          set -e

          # Tweaks to make cloud-localds work in macOS environment
          export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"

          ./vm/build/build.sh
        env:
          TDINFRA_VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          TDINFRA_VM_SSH_AUTHORIZED_KEYS: ${{ secrets.VM_SSH_AUTHORIZED_KEYS }}
          PACKER_GITHUB_API_TOKEN: ${{ github.token }}
      - name: Collect artifact
        uses: actions/upload-artifact@v3
        with:
          name: vm-images
          path: ./vm/build/output
          retention-days: 14
      - name: Collect shared artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shared-storage
          path: /Users/runner/shared
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          repository: YangHanlin/tdinfra
          ref: ${{ inputs.source-ref }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      - name: Download VM images
        uses: actions/download-artifact@v3
        with:
          name: vm-images
          path: ./vm/images
      - name: Download shared artifacts
        uses: actions/download-artifact@v3
        with:
          name: shared-storage
          path: /home/runner/shared
      - name: Set up cache for Python environment
        id: cache-python-env
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
            pip-
      - name: Set up Python environment
        run: |
          set -e

          python3 -m venv ./.venv
          source ./.venv/bin/activate
          python3 -m pip install -U wheel
          python3 -m pip install -U -r ./vm/deployment/requirements.txt
      - name: Run deployment tasks
        run: |
          set -e

          source ./.venv/bin/activate
          python3 ./vm/deployment/deploy.py
      - name: Collect shared artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shared-storage
          path: /home/runner/shared
  clean:
    needs:
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Remove shared artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            shared-storage
